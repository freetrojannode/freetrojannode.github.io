<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://freetrojannode.github.io/news/article-19726.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Spring boot+LogBack+MDC实现链路追踪</title>
        <meta name="description" content="MDC(Mapped Diagnostic Context，映射调试上下文)是 log4j 、logback及log4j2 提供的一种方便在多线程条件下记录日志的功能。MDC&nbsp;可以看成是一个" />
        <link rel="icon" href="__ADDON__/img/freetrojannode/favicon.ico" type="image/x-icon"/>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Montserrat:300,400,500,700" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="__ADDON__/js/frontend/freetrojannode/aos/aos.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/freetrojannode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/freetrojannode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/freetrojannode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/freetrojannode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/freetrojannode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-41Z5LWRP31"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-41Z5LWRP31');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top d-flex align-items-center">
        <div class="container d-flex justify-content-between">
            <div class="logo">
                                <a href="/">
                    <span>Free Trojan Node</span>
                </a>
                            </div>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                        <li><a class="nav-link" href="#">关于</a></li>
                    <li><a class="nav-link" href="#">联系</a></li>
                </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- #header -->
    <main id="main">
        <!-- ======= Breadcrumbs Section ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1>Spring boot+LogBack+MDC实现链路追踪</h1>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs Section -->
        <!-- ======= About Section ======= -->
        <section id="about">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                          				  				  				<div id="content_views" class="htmledit_views"> </h1> <p>MDC(Mapped Diagnostic Context，映射调试上下文)是 log4j 、logback及log4j2 提供的一种方便在多线程条件下记录日志的功能。<strong>MDC</strong>&nbsp;可以看成是一个<strong>与当前线程绑定的哈希表</strong>，可以往其中添加键值对。MDC 中包含的内容可以<strong>被同一线程中执行的代码所访问</strong>。当前线程的子线程会继承其父线程中的 MDC 的内容。当需要记录日志时，只需要从 MDC 中获取所需的信息即可。</p> </h1> <ul> <li>clear() =&gt; 移除所有MDC</li> <li>get (String key) =&gt; 获取当前线程MDC中指定key的值</li> <li>getContext() =&gt; 获取当前线程MDC的MDC</li> <li>put(String key, Object o) =&gt; 往当前线程的MDC中存入指定的键值对</li> <li>remove(String key) =&gt; 删除当前线程MDC中指定的键值对 。</li> </ul> </h1> <ol> <li>拦截器</li> </ol> <pre><code>@Component public class LogInterceptor implements HandlerInterceptor {     @Override     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {         //如果有上层调用就用上层的ID         String traceId = request.getHeader(TraceIdUtil.TRACE_ID);         if (StringUtil.isEmpty(traceId))          {             TraceIdUtil.setTraceId(TraceIdUtil.generateTraceId());         }         else         {             TraceIdUtil.setTraceId(traceId);         }         return true;     }      @Override     public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)             throws Exception      {              }      @Override     public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)             throws Exception {         //调用结束后删除         TraceIdUtil.remove();     } }</code></pre> <ol> <li>工具类</li> </ol> <pre><code>public class TraceIdUtil {   public static final String TRACE_ID = "requestId";        public static String getTraceId()   {      String traceId =(String) MDC.get(TRACE_ID);      return traceId == null ? "" : traceId;   }      public static void setTraceId(String traceId)   {       MDC.put(TRACE_ID,traceId);   }      public static void remove()   {       MDC.remove(TRACE_ID);          }      public static void clear()   {       MDC.clear();   }      public static String generateTraceId() {      return UUID.randomUUID().toString().replace("-", "");   }</code></pre> <ol> <li>日志文件配置</li> </ol> <pre><code>&lt;property name="LOG_PATTERN" value="%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{requestId}] %logger{36} - %msg%n" /&gt;</code></pre> <p>重点是%X{requestId},requestId和MDC中的键名称保持一致。</p> </h1> <p>至此基本的功能已经实现，但是存在一下几个问题</p> <ul> <li>多线程情况下，子线程中打印日志会丢失traceId.</li> <li>HTTP跨服务之间的调用丢失traceId.</li> </ul> </h1> <p>问题重现</p> <pre><code>  @LogAnnotation(model="用户管理",func="查询用户信息",desc="根据用户名称")     @GetMapping("getUserByName")     public Result getUserByName(@RequestParam String name)     {         //主线程日志         logger.info("getUserByName paramter name:"+name);         for(int i=0;i&lt;5;i++)         {            //子线程日志             threadPoolTaskExecutor.execute(()-&gt;{                 logger.info("child thread:{}",name);                 userService.getUserByName(name);              });         }                  return Result.success();     }</code></pre> <p>运行结果</p> <pre><code>2022-03-13 12:45:44.156 [http-nio-8089-exec-1] INFO  [ec05a600ed1a4556934a3afa4883766a] c.s.fw.controller.UserController - getUserByName paramter name:1 2022-03-13 12:45:44.173 [Pool-A1] INFO  [] c.s.fw.controller.UserController - child thread:1</code></pre> <p>从运行的结果来看，子线程打印日志，日志中的traceId信息已经丢失。</p> <p>解决方案</p> <p>子线程在打印日志的过程中traceId将丢失，解决方案为重写线程池(对于直接new Thread 创建线程的情况不考略),实际开发中也需要禁止这种情况。</p> <pre><code>public class ThreadPoolExecutorMdcWrapper extends ThreadPoolTaskExecutor {     private static final long serialVersionUID = 3940722618853093830L;      @Override     public void execute(Runnable task)     {         super.execute(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap()));     }      @Override     public &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)     {         return super                 .submit(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap()));     }      @Override     public Future&lt;?&gt; submit(Runnable task)     {         return super                 .submit(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap()));     } }</code></pre> <p>因为Spring Boot ThreadPoolTaskExecutor 已经对ThreadPoolExecutor进行封装，只需要继承ThreadPoolTaskExecutor重写相关的执行方法即可。</p> <pre><code>public class ThreadMdcUtil {     public static void setTraceIdIfAbsent() {         if (MDC.get(TraceIdUtil.TRACE_ID) == null)          {             MDC.put(TraceIdUtil.TRACE_ID, TraceIdUtil.generateTraceId());         }     }      public static &lt;T&gt; Callable&lt;T&gt; wrap(final Callable&lt;T&gt; callable, final Map&lt;String, String&gt; context) {         return () -&gt; {             if (context == null) {                 MDC.clear();             } else {                 MDC.setContextMap(context);             }             setTraceIdIfAbsent();             try {                 return callable.call();             } finally {                 MDC.clear();             }         };     }      public static Runnable wrap(final Runnable runnable, final Map&lt;String, String&gt; context) {         return () -&gt; {             if (context == null) {                 MDC.clear();             } else {                 MDC.setContextMap(context);             }             //设置traceId             setTraceIdIfAbsent();             try {                 runnable.run();             } finally {                 MDC.clear();             }         };     } }</code></pre> <p>代码说明：</p> <ul> <li>判断当前线程对应MDC的Map是否存在，如果存在则设置</li> <li>设置MDC中的traceId值，不存在则新生成，如果是子线程，MDC中traceId不为null</li> <li>执行run方法</li> </ul> <p>线程池配置</p> <pre><code>@Configuration public class ThreadPoolTaskExecutorConfig {     //最大可用的CPU核数     public static final int PROCESSORS = Runtime.getRuntime().availableProcessors();          @Bean     public ThreadPoolExecutorMdcWrapper getExecutor()     {         ThreadPoolExecutorMdcWrapper executor =new ThreadPoolExecutorMdcWrapper();         executor.setCorePoolSize(PROCESSORS *2);         executor.setMaxPoolSize(PROCESSORS * 4);         executor.setQueueCapacity(50);         executor.setKeepAliveSeconds(60);         executor.setThreadNamePrefix("Task-A");         executor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());         executor.initialize();         return executor;     } }</code></pre> <p>重新运行结果发现子线程能够正常获取traceid信息进行跟踪。</p> <pre><code>2022-03-13 13:19:30.688 [Task-A1] INFO  [482929425cbc4476a4e7168615af7890] c.s.fw.controller.UserController - child thread:1 2022-03-13 13:19:31.003 [Task-A1] INFO  [482929425cbc4476a4e7168615af7890] c.s.fw.service.impl.UserServiceImpl - name:1</code></pre> </h1> <p>HTTP调用第三方服务接口时traceId丢失，需要在发送请求时在Request Header中添加traceId，在被调用方添加拦截器获取header中的traceId添加到MDC中。</p> <p>HTTP调用有多种方式，比较常见的有HttpClient、OKHttp、RestTemplate，以RestTemplate调用为例。</p> <ol> <li>接口调用方</li> </ol> <pre><code>public class RestTemplateTraceIdInterceptor implements         ClientHttpRequestInterceptor {     @Override     public ClientHttpResponse intercept(HttpRequest request, byte[] body,             ClientHttpRequestExecution clientHttpRequestExecution) throws IOException     {         String traceId=MDC.get("requestId");         if(traceId!=null)         {             request.getHeaders().set("requestId", traceId);         }         else         {             request.getHeaders().set("requestId", UUID.randomUUID().toString().replace("-", ""));         }         return clientHttpRequestExecution.execute(request, body);     }  }</code></pre> <p>RestTemplate添加拦截器即可。</p> <pre><code>restTemplate.setInterceptors(Arrays.asList(new RestTemplateTraceIdInterceptor()));</code></pre> <p>2.第三方服务需要添加拦截器。</p> <pre><code>@Component public class LogInterceptor implements HandlerInterceptor {     @Override     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {         //如果有上层调用就用上层的ID         String traceId = request.getHeader(TraceIdUtil.TRACE_ID);         if (StringUtil.isEmpty(traceId))          {             TraceIdUtil.setTraceId(TraceIdUtil.generateTraceId());         }         else         {             TraceIdUtil.setTraceId(traceId);         }         return true;     }      @Override     public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)             throws Exception      {              }      @Override     public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)             throws Exception {         //调用结束后删除         TraceIdUtil.remove();     } }</code></pre> <p>其他HttpClient、OKHttp的实现方式与RestTemplate基本相同，这里就不一一列举。 Spring boot +logback+MDC实现全链路跟踪内容已经讲完了。在实际开发中，我也发现了大家对于日志的使用存在一些问题，下一章将讲解开发中日志使用规约。</p> <p class="img-center"></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-19269.htm">同城免费领养宠物的软件有哪些 同城免费领养宠物的软件有哪些好用</a></p>
                                        <p>下一个：<a href="/news/article-19727.htm">解决go-micro与其它gRPC框架之间的通信问题</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-12-3-trojan-windows.htm" title="12月3日 | Free Trojan Node节点订阅每天更新18.1M/S免费节点订阅链接">12月3日 | Free Trojan Node节点订阅每天更新18.1M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-6-trojan-github.htm" title="10月6日 | Free Trojan Node节点订阅每天更新20.7M/S免费节点订阅链接">10月6日 | Free Trojan Node节点订阅每天更新20.7M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-19-node-share-links.htm" title="9月19日 | Free Trojan Node节点订阅每天更新18.2M/S免费节点订阅链接">9月19日 | Free Trojan Node节点订阅每天更新18.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-3-trojan-node.htm" title="9月3日 | Free Trojan Node节点订阅每天更新19.2M/S免费节点订阅链接">9月3日 | Free Trojan Node节点订阅每天更新19.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-7-trojan-windows.htm" title="11月7日 | Free Trojan Node节点订阅每天更新21.6M/S免费节点订阅链接">11月7日 | Free Trojan Node节点订阅每天更新21.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-21-free-subscribe-node.htm" title="8月21日 | Free Trojan Node节点订阅每天更新19.2M/S免费节点订阅链接">8月21日 | Free Trojan Node节点订阅每天更新19.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-30-free-high-speed-nodes.htm" title="11月30日 | Free Trojan Node节点订阅每天更新18.8M/S免费节点订阅链接">11月30日 | Free Trojan Node节点订阅每天更新18.8M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-22-free-subscribe-node.htm" title="11月22日 | Free Trojan Node节点订阅每天更新18.3M/S免费节点订阅链接">11月22日 | Free Trojan Node节点订阅每天更新18.3M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-2-free-subscribe-node.htm" title="10月2日 | Free Trojan Node节点订阅每天更新22.5M/S免费节点订阅链接">10月2日 | Free Trojan Node节点订阅每天更新22.5M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-23-free-subscribe-node.htm" title="8月23日 | Free Trojan Node节点订阅每天更新19.2M/S免费节点订阅链接">8月23日 | Free Trojan Node节点订阅每天更新19.2M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">9</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container">
            <div class="copyright">
                <a href="/">FreeTrojanNode免费节点官网</a> 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/freetrojannode/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/freetrojannode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>