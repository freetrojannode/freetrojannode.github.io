<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freetrojannode.github.io/news/article-64604.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>比较爽的导航查询 功能  .NET ORM  / SqlSugar</title>
        <meta name="description" content=".NET ORM 新概念导航 今天这篇文章分享一款好用简单的ORM框架 SqlSugar ，相比 EF Core的导航查询 更加简单 ，配置更加容易，几分钟就能上手 1、导航查询特点 作用：主要处理主" />
        <link rel="icon" href="/assets/website/img/freetrojannode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="FreeTrojanNode免费节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freetrojannode.github.io/news/article-64604.htm" />
    <meta property="og:site_name" content="FreeTrojanNode免费节点官网" />
    <meta property="og:title" content="比较爽的导航查询 功能  .NET ORM  / SqlSugar" />
    <meta property="og:image" content="https://freetrojannode.github.io/uploads/20240807-1/e2d811f071d63993620946d52679d5ba.webp" />
        <meta property="og:release_date" content="2025-02-28T06:56:31" />
    <meta property="og:updated_time" content="2025-02-28T06:56:31" />
        <meta property="og:description" content=".NET ORM 新概念导航 今天这篇文章分享一款好用简单的ORM框架 SqlSugar ，相比 EF Core的导航查询 更加简单 ，配置更加容易，几分钟就能上手 1、导航查询特点 作用：主要处理主" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="比较爽的导航查询 功能  .NET ORM  / SqlSugar">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Montserrat:300,400,500,700" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/freetrojannode/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freetrojannode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freetrojannode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freetrojannode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freetrojannode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/freetrojannode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-41Z5LWRP31"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-41Z5LWRP31');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top d-flex align-items-center">
        <div class="container d-flex justify-content-between">
            <div class="logo">
                <a href="/">
                                <span>Free Trojan Node</span>
                                </a>
            </div>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- #header -->
    <main id="main">
        <!-- ======= Breadcrumbs Section ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1>比较爽的导航查询 功能  .NET ORM  / SqlSugar</h1>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs Section -->
        <!-- ======= About Section ======= -->
        <section id="about">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="TrojanNode免费节点官网" data-url="https://trojannode.github.io">
                  				  				  				<h2>.NET ORM 新概念导航</h2> <p>今天这篇文章分享一款好用简单的ORM框架 SqlSugar ，相比 EF Core的导航查询 更加简单 ，配置更加容易，几分钟就能上手</p> <h2 id="blogTitle0">1、导航查询特点</h2> <p>作用：主要处理主对象里面有子对象这种层级关系查询</p> <h3 id="blogTitle1">1.1 无外键开箱就用</h3> <p>其它ORM导航查询 需要 各种配置或者外键，而SqlSugar则开箱就用，无外键，只需配置特性和主键就能使用</p> <h3 id="blogTitle2">1.2 高性能优</h3> <p>&nbsp;查询 性能非常强悍</p> <p>&nbsp;支持大数据分页导航查询</p> <h3 id="blogTitle3">3.3 语法超级爽</h3> <p>注意：多级查询时VS有时候没提示直接写就行了 ，相比 其他 .NET ORM语法要简单的多</p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;"> var list=db.Queryable&lt;Test&gt;()            .Includes(x =&gt; x.Provinces,x=&gt;x.Citys ,x=&gt;x.Street)//多级查询 有时候VS没提示手写             .Includes(x =&gt; x.ClassInfo)// 一级查询            .ToList();                                      var list=db.Queryable&lt;Test&gt;()         //多级查询  加排序过滤         .Includes(x =&gt;x.Provinces.Where(z=&gt;z.Id&gt;0).OrderBy(z=&gt;z.Id).ToList(),x=&gt;x.Citys,x=&gt;x.Street)          // 一级查询         .Includes(x =&gt;x.ClassInfo)         .ToList();</pre> </div> <h2>2、新导航查询 ORM</h2> <p>适合有主键的常规操作, 请升级到5.0.6.8</p> <h3 id="blogTitle5">2.1 一对一</h3> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">实体</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> StudentA         {             [SugarColumn(IsPrimaryKey</span>=<span style="color: rgba(0, 0, 255, 1)">true, IsIdentity = true</span><span style="color: rgba(0, 0, 0, 1)">)]</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> StudentId {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">string</span> Name {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> SchoolId {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }             [Navigate(NavigateType.OneToOne, nameof(SchoolId))]</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">一对一</span><span style="color: rgba(0, 0, 255, 1)">public</span> SchoolA SchoolA {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }            }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> SchoolA         {             [SugarColumn(IsPrimaryKey</span>=<span style="color: rgba(0, 0, 255, 1)">true, IsIdentity = true</span><span style="color: rgba(0, 0, 0, 1)">)]</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> SchoolId {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">string</span> SchoolName {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }          }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">代码</span><span style="color: rgba(0, 0, 255, 1)">var</span> list2 = db.Queryable&lt;StudentA&gt;<span style="color: rgba(0, 0, 0, 1)">()            .Includes(x</span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> x.SchoolA)            .Where(x</span>=&gt; x.SchoolA.SchoolName ==<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">北大</span><span style="color: rgba(128, 0, 0, 1)">"</span>)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">可以对一级导航进行过滤</span>            .ToList();</pre> </div> <h3>2.2 一对多</h3> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">    public class StudentA     {      [SugarColumn(IsPrimaryKey = true, IsIdentity = true)]      public int StudentId { get; set; }      public string Name { get; set; }      public int SchoolId { get; set; }      [Navigate(NavigateType.OneToMany, nameof(BookA.studenId))]      public List&lt;BookA&gt; Books { get; set; }        }     public class BookA     {        [SugarColumn(IsPrimaryKey = true, IsIdentity = true)]        public int BookId { get; set; }       public string Name { get; set; }       public int studenId { get; set; }     }               //例1: 简单用法     var list = db.Queryable&lt;StudentA&gt;()     .Includes(x =&gt; x.Books)     .ToList();           //例2:支持Any和Count 对主表进行过滤     var list = db.Queryable&lt;StudentA&gt;()     .Includes(x =&gt; x.Books)      .Where(x=&gt;x.Books.Any(z=&gt;z.BookId==1))     .ToList();           //例3:对子对象进行排序和过滤      var list = db.Queryable&lt;StudentA&gt;()        .Includes(x =&gt; x.Books.Where(y=&gt;y.BookId &gt;0).OrderBy(y=&gt;y.BookId ).ToList())         .ToList();</pre> </div> <h3 id="blogTitle7">2.3 多对多</h3> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">多对多</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> ABMapping1        {             [SugarColumn(IsPrimaryKey</span>=<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)"> )]</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> AId {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }             [SugarColumn(IsPrimaryKey</span>=<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)]</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> BId {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> A1         {             [SugarColumn(IsPrimaryKey</span>=<span style="color: rgba(0, 0, 255, 1)">true, IsIdentity = true</span><span style="color: rgba(0, 0, 0, 1)">  )]</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> Id {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">string</span> Name {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }             [Navigate(</span><span style="color: rgba(0, 0, 255, 1)">typeof</span><span style="color: rgba(0, 0, 0, 1)">(ABMapping1),nameof(ABMapping1.AId),nameof(ABMapping1.BId))]</span><span style="color: rgba(0, 0, 255, 1)">public</span> List&lt;B1&gt; BList {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> B1         {             [SugarColumn(IsPrimaryKey</span>=<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)"> , IsIdentity = true)]</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> Id {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">string</span> Name {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }             [Navigate(</span><span style="color: rgba(0, 0, 255, 1)">typeof</span><span style="color: rgba(0, 0, 0, 1)">(ABMapping1), nameof(ABMapping1.BId), nameof(ABMapping1.AId))]</span><span style="color: rgba(0, 0, 255, 1)">public</span> List&lt;A1&gt; AList {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }         }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">例1:简单用法</span><span style="color: rgba(0, 0, 255, 1)">var</span> list3= db.Queryable&lt;A1&gt;().Includes(x =&gt;<span style="color: rgba(0, 0, 0, 1)"> x.BList).ToList();</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">例2:支持子对象排序和过滤</span><span style="color: rgba(0, 0, 255, 1)">var</span> list3= db.Queryable&lt;A1&gt;().Includes(x =&gt; x.BList.Where(z=&gt;z.Id&gt;<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">).ToList()).ToList();</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">例3:支持主表过滤  Any和Count</span><span style="color: rgba(0, 0, 255, 1)">var</span> list3= db.Queryable&lt;A1&gt;().Includes(x =&gt;<span style="color: rgba(0, 0, 0, 1)"> x.BList)                              .Where(x</span>=&gt;x.BList .Any(z=&gt;z.Id ==<span style="color: rgba(128, 0, 128, 1)">1</span>)).ToList();</pre> </div> <h3>2.4 多级查询</h3> <p id="blogTitle8">配置好实体类，我们可以多级查询 ，.NET 中轻松多级查询</p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;"> var list=db.Queryable&lt;Test&gt;()                 .Includes(x =&gt; x.Provinces,x=&gt;x.Citys ,x=&gt;x.Street)//有时候没提示 直接写                 .Includes(x =&gt; x.ClassInfo)// 一级查询                 .ToList();</pre> </div> <h3><span style="font-size: 1.17em">2.5 大数据分页导航</span></h3> <p>适合一次性查询1000条以上的导航</p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">  var list = new List&lt;Tree1&gt;();       db.Queryable&lt;Tree1&gt;()         .Includes(it =&gt; it.Child)         .ForEach(it =&gt; list.Add(it), 300); //每次查询300条</pre> </div> <p>&nbsp;更多用法：https://www.donet5.com/Home/Doc?typeId=2414</p> <h2 id="blogTitle10">3、ORM无配置映射（高性能）</h2> <p>适合没有主键或者复杂的一些操作</p> <h3 id="blogTitle11">&nbsp;3.1 无配置映射实现二层</h3> <p>结构:&nbsp; Student-&gt;SchoolA</p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">var list = db.Queryable&lt;StudentA&gt;().ToList(); db.ThenMapper(list, stu =&gt; {   //如果加Where不能带有stu参数，stu参数写到 SetContext   stu.SchoolA=db.Queryable&lt;SchoolA&gt;().SetContext(scl=&gt;scl.SchoolId,()=&gt;stu.SchoolId,stu).FirstOrDefault(); }); // SetContext不会生成循环操作，高性能  和直接Where性能是不一样的</pre> </div> <p><span style="font-size: 1.17em">如果没有SetContext那么这个查询将会循环</span></p> <h3><span style="font-size: 1.17em">3.2&nbsp; 无配置映射无限级</span></h3> <p>了解原理后我们用ThenMapper想映射哪层就映射哪层</p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">var treeRoot=db.Queryable&lt;Tree&gt;().Where(it =&gt; it.Id == 1).ToList(); //第一层 db.ThenMapper(treeRoot, item =&gt; {     item.Child = db.Queryable&lt;Tree&gt;().SetContext(x =&gt; x.ParentId, () =&gt; item.Id, item).ToList(); }); //第二层 db.ThenMapper(treeRoot.SelectMany(it=&gt;it.Child), it =&gt; {     it.Child = db.Queryable&lt;Tree&gt;().SetContext(x =&gt; x.ParentId, () =&gt; it.Id, it).ToList(); }); //第三层 db.ThenMapper(treeRoot.SelectMany(it =&gt; it.Child).SelectMany(it=&gt;it.Child), it =&gt; {     it.Child = db.Queryable&lt;Tree&gt;().SetContext(x =&gt; x.ParentId, () =&gt; it.Id, it).ToList(); }); //这儿只是用树型结构来证明可以实现无限级别导航查询 ,实际开发中树型结构用ToTree实现 public class Tree { [SqlSugar.SugarColumn(IsPrimaryKey =true)] public int Id { get; set; } public string Name { get; set; } public int ParentId { get; set; } [SqlSugar.SugarColumn(IsIgnore = true)] public Tree Parent { get; set; } [SqlSugar.SugarColumn(IsIgnore = true)] public List&lt;Tree&gt; Child { get; set; } } // SetContext不会生成循环操作，高性能  和直接Where性能是不一样的</pre> </div> <h2></h2> <h2>4 、.NET ORM 未来计划</h2> <p>Json to sql&nbsp; 正在开发中 ，未来将打造一套直接由前端操作数据库的API</p> <div class="cnblogs_Highlighter"> <pre class="brush:javascript;gutter:true;"> {  "Queryable":"order",   Select:[ [{SqlFunc_AggregateMin:["id"]},"id"], [{SqlFunc_GetDate:[]},"Date"] ]  }</pre> </div> <p>将支持 权限过滤 ，验证，多表查询，层级导航查询 等</p> <h2>GitHUB 源码：</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/donet5/SqlSugar"  target="_blank" rel="nofollow">https://github.com/donet5/SqlSugar</a></p> <p>喜欢的可以点个星星、点个关注</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-64599.htm">Celery ETA任务重复提交的问题解决</a></p>
                                        <p>下一个：<a href="/news/article-65209.htm">linux设置自动获取ip命令,详解如何设置CentOS 7开机自动获取IP地址</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-2-10-latest-trojan-node.htm" title="2月10日 | Free Trojan Node节点订阅每天更新19.1M/S免费节点订阅链接">2月10日 | Free Trojan Node节点订阅每天更新19.1M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-62780.htm" title="宠物粮行业分析报告怎么写的（宠物粮行业分析报告怎么写的啊）">宠物粮行业分析报告怎么写的（宠物粮行业分析报告怎么写的啊）</a></li>
                        <li class="py-2"><a href="/news/article-56987.htm" title="宠物领养网站app名字 宠物领养网站app名字大全">宠物领养网站app名字 宠物领养网站app名字大全</a></li>
                        <li class="py-2"><a href="/news/article-65846.htm" title="卡式空调好吗(卡式空调品牌排行榜前十名)">卡式空调好吗(卡式空调品牌排行榜前十名)</a></li>
                        <li class="py-2"><a href="/news/article-66450.htm" title="动物医院在哪里（动物医院的电话号码是多少）">动物医院在哪里（动物医院的电话号码是多少）</a></li>
                        <li class="py-2"><a href="/news/article-45487.htm" title="动物疫苗价格表图片高清大全集 动物疫苗价格表图片高清大全集下载">动物疫苗价格表图片高清大全集 动物疫苗价格表图片高清大全集下载</a></li>
                        <li class="py-2"><a href="/news/article-47949.htm" title="动物疫苗哪个好 动物疫苗品牌">动物疫苗哪个好 动物疫苗品牌</a></li>
                        <li class="py-2"><a href="/news/article-53132.htm" title="springboot中使用restemplate，请求接口会将url参数的%编码为%25问题解决">springboot中使用restemplate，请求接口会将url参数的%编码为%25问题解决</a></li>
                        <li class="py-2"><a href="/news/article-48964.htm" title="宠物粮食在哪里进货好卖呢图片（宠物粮在哪里买）">宠物粮食在哪里进货好卖呢图片（宠物粮在哪里买）</a></li>
                        <li class="py-2"><a href="/news/article-36585.htm" title="动物防疫***收费吗现在怎么收费（动物防疫疫苗）">动物防疫***收费吗现在怎么收费（动物防疫疫苗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">83</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <a href="/">FreeTrojanNode免费节点官网</a> 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/freetrojannode/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/freetrojannode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/freetrojannode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>